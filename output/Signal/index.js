// Generated by purs version 0.15.15
import * as $foreign from "./foreign.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
var squigglyMap = function (dictFunctor) {
    return Data_Functor.map(dictFunctor);
};
var squigglyApply = function (dictApply) {
    return Control_Apply.apply(dictApply);
};
var semigroupSignal = {
    append: $foreign.merge
};
var monoidSignal = function (dictMonoid) {
    return {
        mempty: $foreign.constant(Data_Monoid.mempty(dictMonoid)),
        Semigroup0: function () {
            return semigroupSignal;
        }
    };
};
var mergeMany = function (dictFunctor) {
    var map1 = Data_Functor.map(dictFunctor);
    return function (dictFoldable) {
        var foldl = Data_Foldable.foldl(dictFoldable);
        return function (sigs) {
            var mergeMaybe = function (v) {
                return function (v1) {
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return v;
                    };
                    if (v instanceof Data_Maybe.Nothing) {
                        return v1;
                    };
                    if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                        return new Data_Maybe.Just($foreign.merge(v.value0)(v1.value0));
                    };
                    throw new Error("Failed pattern match at Signal (line 53, column 9 - line 53, column 33): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return foldl(mergeMaybe)(Data_Maybe.Nothing.value)(map1(Data_Maybe.Just.create)(sigs));
        };
    };
};
var functorSignal = {
    map: $foreign.mapSig
};
var map = /* #__PURE__ */ Data_Functor.map(functorSignal);
var squigglyMap1 = /* #__PURE__ */ squigglyMap(functorSignal);
var flippedMap = function (dictFunctor) {
    return Data_Function.flip(Data_Functor.map(dictFunctor));
};
var flippedMap1 = /* #__PURE__ */ flippedMap(functorSignal);
var flatten = function (dictFunctor) {
    var map1 = Data_Functor.map(dictFunctor);
    return function (dictFoldable) {
        var fold = Data_Foldable.fold(dictFoldable)(Data_Monoid.monoidArray);
        return function (sig) {
            return $foreign.flattenArray(flippedMap1(sig)((function () {
                var $30 = map1(function (i) {
                    return [ i ];
                });
                return function ($31) {
                    return fold($30($31));
                };
            })()));
        };
    };
};
var filterMap = function (f) {
    return function (def) {
        return function (sig) {
            return map(Data_Maybe.fromMaybe(def))($foreign.filter(Data_Maybe.isJust)(new Data_Maybe.Just(def))(map(f)(sig)));
        };
    };
};
var dropRepeats$prime = $foreign.dropRepeatsByStrictInequality;
var dropRepeats = function (dictEq) {
    return $foreign.dropRepeatsImpl(Data_Eq.eq(dictEq));
};
var applySignal = {
    apply: $foreign.applySig,
    Functor0: function () {
        return functorSignal;
    }
};
var squigglyApply1 = /* #__PURE__ */ squigglyApply(applySignal);
var map2 = function (f) {
    return function (a) {
        return function (b) {
            return squigglyApply1(squigglyMap1(f)(a))(b);
        };
    };
};
var map3 = function (f) {
    return function (a) {
        return function (b) {
            return function (c) {
                return squigglyApply1(squigglyApply1(squigglyMap1(f)(a))(b))(c);
            };
        };
    };
};
var map4 = function (f) {
    return function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return squigglyApply1(squigglyApply1(squigglyApply1(squigglyMap1(f)(a))(b))(c))(d);
                };
            };
        };
    };
};
var map5 = function (f) {
    return function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return squigglyApply1(squigglyApply1(squigglyApply1(squigglyApply1(squigglyMap1(f)(a))(b))(c))(d))(e);
                    };
                };
            };
        };
    };
};
var applicativeSignal = {
    pure: $foreign.constant,
    Apply0: function () {
        return applySignal;
    }
};
export {
    constant,
    merge,
    foldp,
    sampleOn,
    runSignal,
    unwrap,
    get,
    filter,
    flattenArray
} from "./foreign.js";
export {
    mergeMany,
    dropRepeats,
    dropRepeats$prime,
    filterMap,
    flatten,
    squigglyMap,
    squigglyApply,
    flippedMap,
    map2,
    map3,
    map4,
    map5,
    functorSignal,
    applySignal,
    applicativeSignal,
    semigroupSignal,
    monoidSignal
};
//# sourceMappingURL=index.js.map
