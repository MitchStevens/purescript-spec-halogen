// Generated by purs version 0.15.15
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Comonad from "../Control.Comonad/index.js";
import * as Control_Comonad_Cofree from "../Control.Comonad.Cofree/index.js";
import * as Control_Extend from "../Control.Extend/index.js";
import * as Control_Monad_Free from "../Control.Monad.Free/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Profunctor from "../Data.Profunctor/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Matryoshka_Class_Corecursive from "../Matryoshka.Class.Corecursive/index.js";
import * as Matryoshka_DistributiveLaw from "../Matryoshka.DistributiveLaw/index.js";
import * as Matryoshka_Fold from "../Matryoshka.Fold/index.js";
import * as Matryoshka_Util from "../Matryoshka.Util/index.js";
var lcmap = /* #__PURE__ */ Data_Profunctor.lcmap(Data_Profunctor.profunctorFn);
var unwrap = /* #__PURE__ */ Data_Newtype.unwrap();
var transHylo = function (dictRecursive) {
    var mapR = Matryoshka_Util.mapR(dictRecursive);
    return function (dictCorecursive) {
        var mapR1 = mapR(dictCorecursive);
        return function (dictFunctor) {
            var map = Data_Functor.map(dictFunctor);
            return function (f) {
                return function (g) {
                    var go = function (t) {
                        return mapR1((function () {
                            var $97 = map(go);
                            return function ($98) {
                                return f($97(g($98)));
                            };
                        })())(t);
                    };
                    return go;
                };
            };
        };
    };
};
var hyloM = function (dictMonad) {
    var bindFlipped = Control_Bind.bindFlipped(dictMonad.Bind1());
    var Applicative0 = dictMonad.Applicative0();
    return function (dictTraversable) {
        var traverse = Data_Traversable.traverse(dictTraversable)(Applicative0);
        return function (f) {
            return function (g) {
                var go = function (a) {
                    return bindFlipped(f)(bindFlipped(traverse(go))(g(a)));
                };
                return go;
            };
        };
    };
};
var hylo = function (dictFunctor) {
    var map = Data_Functor.map(dictFunctor);
    return function (f) {
        return function (g) {
            var go = function (a) {
                return f(map(go)(g(a)));
            };
            return go;
        };
    };
};
var ghyloM = function (dictMonad) {
    var Bind1 = dictMonad.Bind1();
    var bindFlipped = Control_Bind.bindFlipped(Bind1);
    var Applicative0 = dictMonad.Applicative0();
    var map = Data_Functor.map((Bind1.Apply0()).Functor0());
    return function (dictMonad1) {
        var join = Control_Bind.join(dictMonad1.Bind1());
        var pure = Control_Applicative.pure(dictMonad1.Applicative0());
        return function (dictComonad) {
            var duplicate = Control_Extend.duplicate(dictComonad.Extend0());
            var extract = Control_Comonad.extract(dictComonad);
            return function (dictTraversable) {
                var traverse = Data_Traversable.traverse(dictTraversable)(Applicative0);
                return function (dictTraversable1) {
                    var traverse1 = Data_Traversable.traverse(dictTraversable1)(Applicative0);
                    return function (dictTraversable2) {
                        var traverse2 = Data_Traversable.traverse(dictTraversable2)(Applicative0);
                        return function (w) {
                            return function (m) {
                                return function (f) {
                                    return function (g) {
                                        var h = function (x) {
                                            return bindFlipped(traverse1(f))(map(w)(bindFlipped((function () {
                                                var $99 = traverse((function () {
                                                    var $101 = map(duplicate);
                                                    return function ($102) {
                                                        return $101(h(join($102)));
                                                    };
                                                })());
                                                return function ($100) {
                                                    return $99(m($100));
                                                };
                                            })())(traverse2(g)(x))));
                                        };
                                        var $103 = map(extract);
                                        return function ($104) {
                                            return $103(h(pure($104)));
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var ghylo = function (dictMonad) {
    var Bind1 = dictMonad.Bind1();
    var join = Control_Bind.join(Bind1);
    var map = Data_Functor.map((Bind1.Apply0()).Functor0());
    var pure = Control_Applicative.pure(dictMonad.Applicative0());
    return function (dictComonad) {
        var Extend0 = dictComonad.Extend0();
        var map1 = Data_Functor.map(Extend0.Functor0());
        var duplicate = Control_Extend.duplicate(Extend0);
        var extract = Control_Comonad.extract(dictComonad);
        return function (dictFunctor) {
            var map2 = Data_Functor.map(dictFunctor);
            return function (w) {
                return function (n) {
                    return function (f) {
                        return function (g) {
                            var go = function (na) {
                                return map1(f)(w(map2(function ($105) {
                                    return duplicate(go(join($105)));
                                })(n(map(g)(na)))));
                            };
                            return function ($106) {
                                return extract(go(pure($106)));
                            };
                        };
                    };
                };
            };
        };
    };
};
var ghylo1 = /* #__PURE__ */ ghylo(Data_Identity.monadIdentity);
var ghylo2 = /* #__PURE__ */ ghylo(Control_Monad_Free.freeMonad);
var ghylo3 = /* #__PURE__ */ ghylo2(Data_Identity.comonadIdentity);
var dyna = function (dictFunctor) {
    var ghylo4 = ghylo1(Control_Comonad_Cofree.comonadCofree(dictFunctor))(dictFunctor);
    var distHisto = Matryoshka_DistributiveLaw.distHisto(dictFunctor);
    var distAna = Matryoshka_DistributiveLaw.distAna(dictFunctor);
    var map = Data_Functor.map(dictFunctor);
    return function (f) {
        return function (g) {
            return ghylo4(distHisto)(distAna)(f)((function () {
                var $107 = map(Data_Identity.Identity);
                return function ($108) {
                    return $107(g($108));
                };
            })());
        };
    };
};
var convertTo = function (dictRecursive) {
    var cata = Matryoshka_Fold.cata(dictRecursive);
    return function (dictCorecursive) {
        return cata(Matryoshka_Class_Corecursive.embed(dictCorecursive));
    };
};
var codynaM = function (dictMonad) {
    var ghyloM1 = ghyloM(dictMonad)(Control_Monad_Free.freeMonad)(Data_Identity.comonadIdentity);
    return function (dictTraversable) {
        var ghyloM2 = ghyloM1(dictTraversable)(Data_Traversable.traversableIdentity)(Control_Monad_Free.traversableFree(dictTraversable));
        var Functor0 = dictTraversable.Functor0();
        var distCata = Matryoshka_DistributiveLaw.distCata(Functor0);
        var distFutu = Matryoshka_DistributiveLaw.distFutu(Functor0);
        var map = Data_Functor.map(Functor0);
        return function (f) {
            return ghyloM2(distCata)(distFutu)(lcmap(map(unwrap))(f));
        };
    };
};
var codyna = function (dictFunctor) {
    var ghylo4 = ghylo3(dictFunctor);
    var distCata = Matryoshka_DistributiveLaw.distCata(dictFunctor);
    var distFutu = Matryoshka_DistributiveLaw.distFutu(dictFunctor);
    var map = Data_Functor.map(dictFunctor);
    return function (f) {
        return ghylo4(distCata)(distFutu)(lcmap(map(unwrap))(f));
    };
};
var chrono = function (dictFunctor) {
    return ghylo2(Control_Comonad_Cofree.comonadCofree(dictFunctor))(dictFunctor)(Matryoshka_DistributiveLaw.distHisto(dictFunctor))(Matryoshka_DistributiveLaw.distFutu(dictFunctor));
};
export {
    hylo,
    hyloM,
    ghylo,
    ghyloM,
    transHylo,
    dyna,
    codyna,
    codynaM,
    chrono,
    convertTo
};
//# sourceMappingURL=index.js.map
