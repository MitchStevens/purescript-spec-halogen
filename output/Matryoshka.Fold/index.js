// Generated by purs version 0.15.15
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Comonad from "../Control.Comonad/index.js";
import * as Control_Comonad_Cofree from "../Control.Comonad.Cofree/index.js";
import * as Control_Comonad_Env_Trans from "../Control.Comonad.Env.Trans/index.js";
import * as Control_Extend from "../Control.Extend/index.js";
import * as Control_Semigroupoid from "../Control.Semigroupoid/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_HeytingAlgebra from "../Data.HeytingAlgebra/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Monoid_Disj from "../Data.Monoid.Disj/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Profunctor_Strong from "../Data.Profunctor.Strong/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Matryoshka_Class_Corecursive from "../Matryoshka.Class.Corecursive/index.js";
import * as Matryoshka_Class_Recursive from "../Matryoshka.Class.Recursive/index.js";
import * as Matryoshka_DistributiveLaw from "../Matryoshka.DistributiveLaw/index.js";
import * as Matryoshka_Util from "../Matryoshka.Util/index.js";
var fanout = /* #__PURE__ */ Data_Profunctor_Strong.fanout(Control_Semigroupoid.semigroupoidFn)(Data_Profunctor_Strong.strongFn);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var alaF = /* #__PURE__ */ Data_Newtype.alaF()()()();
var monoidDisj = /* #__PURE__ */ Data_Monoid_Disj.monoidDisj(Data_HeytingAlgebra.heytingAlgebraBoolean);
var pure = /* #__PURE__ */ Control_Applicative.pure(Data_List_Types.applicativeList);
var bindFlipped = /* #__PURE__ */ Control_Bind.bindFlipped(Data_List_Types.bindList);
var transParaT = function (dictRecursive) {
    var mapR = Matryoshka_Util.mapR(dictRecursive);
    return function (dictCorecursive) {
        var mapR1 = mapR(dictCorecursive);
        var map = Data_Functor.map(dictCorecursive.Functor0());
        return function (f) {
            var go = function (t) {
                return f(t)(mapR1(map(go))(t));
            };
            return go;
        };
    };
};
var transPara = function (dictRecursive) {
    var mapR = Matryoshka_Util.mapR(dictRecursive);
    var map = Data_Functor.map(dictRecursive.Functor0());
    return function (dictCorecursive) {
        var mapR1 = mapR(dictCorecursive);
        return function (f) {
            var go = function (t) {
                return mapR1((function () {
                    var $283 = map(fanout(identity)(go));
                    return function ($284) {
                        return f($283($284));
                    };
                })())(t);
            };
            return go;
        };
    };
};
var transCataTM = function (dictRecursive) {
    var traverseR = Matryoshka_Util.traverseR(dictRecursive);
    return function (dictCorecursive) {
        var traverseR1 = traverseR(dictCorecursive);
        return function (dictMonad) {
            var Bind1 = dictMonad.Bind1();
            var bindFlipped1 = Control_Bind.bindFlipped(Bind1);
            var traverseR2 = traverseR1((Bind1.Apply0()).Functor0());
            var Applicative0 = dictMonad.Applicative0();
            return function (dictTraversable) {
                var traverse = Data_Traversable.traverse(dictTraversable)(Applicative0);
                return function (f) {
                    var go = function (t) {
                        return bindFlipped1(f)(traverseR2(traverse(go))(t));
                    };
                    return go;
                };
            };
        };
    };
};
var transCataT = function (dictRecursive) {
    var mapR = Matryoshka_Util.mapR(dictRecursive);
    return function (dictCorecursive) {
        var mapR1 = mapR(dictCorecursive);
        var map = Data_Functor.map(dictCorecursive.Functor0());
        return function (f) {
            var go = function (t) {
                return f(mapR1(map(go))(t));
            };
            return go;
        };
    };
};
var transCataM = function (dictRecursive) {
    var traverseR = Matryoshka_Util.traverseR(dictRecursive);
    return function (dictCorecursive) {
        var traverseR1 = traverseR(dictCorecursive);
        return function (dictMonad) {
            var Bind1 = dictMonad.Bind1();
            var traverseR2 = traverseR1((Bind1.Apply0()).Functor0());
            var composeKleisliFlipped = Control_Bind.composeKleisliFlipped(Bind1);
            var Applicative0 = dictMonad.Applicative0();
            return function (dictTraversable) {
                var traverse = Data_Traversable.traverse(dictTraversable)(Applicative0);
                return function (f) {
                    var go = function (t) {
                        return traverseR2(composeKleisliFlipped(f)(traverse(go)))(t);
                    };
                    return go;
                };
            };
        };
    };
};
var transCata = function (dictRecursive) {
    var mapR = Matryoshka_Util.mapR(dictRecursive);
    var map = Data_Functor.map(dictRecursive.Functor0());
    return function (dictCorecursive) {
        var mapR1 = mapR(dictCorecursive);
        return function (f) {
            var go = function (t) {
                return mapR1((function () {
                    var $285 = map(go);
                    return function ($286) {
                        return f($285($286));
                    };
                })())(t);
            };
            return go;
        };
    };
};
var transPrepro = function (dictRecursive) {
    var mapR = Matryoshka_Util.mapR(dictRecursive);
    var transCata1 = transCata(dictRecursive);
    return function (dictCorecursive) {
        var map = Data_Functor.map(dictCorecursive.Functor0());
        var transCata2 = transCata1(dictCorecursive);
        return function (dictCorecursive1) {
            var mapR1 = mapR(dictCorecursive1);
            return function (f) {
                return function (g) {
                    var go = function (t) {
                        return mapR1((function () {
                            var $287 = map((function () {
                                var $289 = transCata2(f);
                                return function ($290) {
                                    return go($289($290));
                                };
                            })());
                            return function ($288) {
                                return g($287($288));
                            };
                        })())(t);
                    };
                    return go;
                };
            };
        };
    };
};
var topDownCataM = function (dictRecursive) {
    var traverseR = Matryoshka_Util.traverseR(dictRecursive);
    return function (dictCorecursive) {
        var traverseR1 = traverseR(dictCorecursive);
        return function (dictMonad) {
            var Bind1 = dictMonad.Bind1();
            var bind = Control_Bind.bind(Bind1);
            var traverseR2 = traverseR1((Bind1.Apply0()).Functor0());
            var Applicative0 = dictMonad.Applicative0();
            return function (dictTraversable) {
                var traverse = Data_Traversable.traverse(dictTraversable)(Applicative0);
                return function (f) {
                    var go = function (a) {
                        return function (t) {
                            return bind(f(a)(t))(function (v) {
                                return traverseR2(traverse(go(v.value0)))(v.value1);
                            });
                        };
                    };
                    return go;
                };
            };
        };
    };
};
var topDownCata = function (dictRecursive) {
    var mapR = Matryoshka_Util.mapR(dictRecursive);
    return function (dictCorecursive) {
        var mapR1 = mapR(dictCorecursive);
        var map = Data_Functor.map(dictCorecursive.Functor0());
        return function (f) {
            var go = function (a) {
                return function (t) {
                    var v = f(a)(t);
                    return mapR1(map(go(v.value0)))(v.value1);
                };
            };
            return go;
        };
    };
};
var paraM = function (dictRecursive) {
    var project = Matryoshka_Class_Recursive.project(dictRecursive);
    return function (dictMonad) {
        var Bind1 = dictMonad.Bind1();
        var bindFlipped1 = Control_Bind.bindFlipped(Bind1);
        var Applicative0 = dictMonad.Applicative0();
        var map = Data_Functor.map((Bind1.Apply0()).Functor0());
        return function (dictTraversable) {
            var traverse = Data_Traversable.traverse(dictTraversable)(Applicative0);
            return function (f) {
                var go = function (t) {
                    return bindFlipped1(f)(traverse((function () {
                        var $291 = map(Data_Tuple.Tuple.create(t));
                        return function ($292) {
                            return $291(go($292));
                        };
                    })())(project(t)));
                };
                return go;
            };
        };
    };
};
var para = function (dictRecursive) {
    var map = Data_Functor.map(dictRecursive.Functor0());
    var project = Matryoshka_Class_Recursive.project(dictRecursive);
    return function (f) {
        var go = function (t) {
            return f(map(g)(project(t)));
        };
        var g = function (t) {
            return new Data_Tuple.Tuple(t, go(t));
        };
        return go;
    };
};
var mutu = function (dictRecursive) {
    var map = Data_Functor.map(dictRecursive.Functor0());
    var project = Matryoshka_Class_Recursive.project(dictRecursive);
    return function (f) {
        return function (g) {
            var go = function (x) {
                return new Data_Tuple.Tuple(mutu(dictRecursive)(g)(f)(x), mutu(dictRecursive)(f)(g)(x));
            };
            var $293 = map(go);
            return function ($294) {
                return g($293(project($294)));
            };
        };
    };
};
var isLeaf = function (dictRecursive) {
    var project = Matryoshka_Class_Recursive.project(dictRecursive);
    return function (dictFoldable) {
        var foldMap = Data_Foldable.foldMap(dictFoldable)(monoidDisj);
        return function (t) {
            return alaF(Data_Monoid_Disj.Disj)(foldMap)(Data_Function["const"](true))(project(t));
        };
    };
};
var gcataM = function (dictRecursive) {
    var project = Matryoshka_Class_Recursive.project(dictRecursive);
    return function (dictMonad) {
        var Bind1 = dictMonad.Bind1();
        var map = Data_Functor.map((Bind1.Apply0()).Functor0());
        var Applicative0 = dictMonad.Applicative0();
        var composeKleisliFlipped = Control_Bind.composeKleisliFlipped(Bind1);
        return function (dictComonad) {
            var duplicate = Control_Extend.duplicate(dictComonad.Extend0());
            var extract = Control_Comonad.extract(dictComonad);
            return function (dictTraversable) {
                var traverse = Data_Traversable.traverse(dictTraversable)(Applicative0);
                return function (dictTraversable1) {
                    var traverse1 = Data_Traversable.traverse(dictTraversable1)(Applicative0);
                    return function (k) {
                        return function (g) {
                            var loop = function (t) {
                                return map(k)(traverse(composeKleisliFlipped((function () {
                                    var $295 = map(duplicate);
                                    var $296 = traverse1(g);
                                    return function ($297) {
                                        return $295($296($297));
                                    };
                                })())(loop))(project(t)));
                            };
                            return composeKleisliFlipped(function ($298) {
                                return g(extract($298));
                            })(loop);
                        };
                    };
                };
            };
        };
    };
};
var gcata = function (dictRecursive) {
    var map = Data_Functor.map(dictRecursive.Functor0());
    var project = Matryoshka_Class_Recursive.project(dictRecursive);
    return function (dictComonad) {
        var Extend0 = dictComonad.Extend0();
        var duplicate = Control_Extend.duplicate(Extend0);
        var map1 = Data_Functor.map(Extend0.Functor0());
        var extract = Control_Comonad.extract(dictComonad);
        return function (k) {
            return function (g) {
                var go = function (t) {
                    return k(map((function () {
                        var $299 = map1(g);
                        return function ($300) {
                            return duplicate($299(go($300)));
                        };
                    })())(project(t)));
                };
                return function ($301) {
                    return g(extract(go($301)));
                };
            };
        };
    };
};
var ghisto = function (dictRecursive) {
    var gcata1 = gcata(dictRecursive);
    var distGHisto = Matryoshka_DistributiveLaw.distGHisto(dictRecursive.Functor0());
    return function (dictFunctor) {
        var gcata2 = gcata1(Control_Comonad_Cofree.comonadCofree(dictFunctor));
        var distGHisto1 = distGHisto(dictFunctor);
        return function (g) {
            return gcata2(distGHisto1(g));
        };
    };
};
var gzygo = function (dictRecursive) {
    var gcata1 = gcata(dictRecursive);
    var distZygoT = Matryoshka_DistributiveLaw.distZygoT(dictRecursive.Functor0());
    return function (dictComonad) {
        var gcata2 = gcata1(Control_Comonad_Env_Trans.comonadEnvT(dictComonad));
        var distZygoT1 = distZygoT(dictComonad);
        return function (f) {
            return function (w) {
                return gcata2(distZygoT1(f)(w));
            };
        };
    };
};
var gpara = function (dictRecursive) {
    var gzygo1 = gzygo(dictRecursive);
    return function (dictCorecursive) {
        var embed = Matryoshka_Class_Corecursive.embed(dictCorecursive);
        return function (dictComonad) {
            return gzygo1(dictComonad)(embed);
        };
    };
};
var histo = function (dictRecursive) {
    var Functor0 = dictRecursive.Functor0();
    return gcata(dictRecursive)(Control_Comonad_Cofree.comonadCofree(Functor0))(Matryoshka_DistributiveLaw.distHisto(Functor0));
};
var zygo = function (dictRecursive) {
    var $302 = gcata(dictRecursive)(Data_Tuple.comonadTuple);
    var $303 = Matryoshka_DistributiveLaw.distZygo(dictRecursive.Functor0());
    return function ($304) {
        return $302($303($304));
    };
};
var elgotPara = function (dictRecursive) {
    var map = Data_Functor.map(dictRecursive.Functor0());
    var project = Matryoshka_Class_Recursive.project(dictRecursive);
    return function (f) {
        var go = function (t) {
            return f(new Data_Tuple.Tuple(t, map(go)(project(t))));
        };
        return go;
    };
};
var elgotCata = function (dictRecursive) {
    var map = Data_Functor.map(dictRecursive.Functor0());
    var project = Matryoshka_Class_Recursive.project(dictRecursive);
    return function (dictComonad) {
        var Extend0 = dictComonad.Extend0();
        var map1 = Data_Functor.map(Extend0.Functor0());
        var duplicate = Control_Extend.duplicate(Extend0);
        return function (k) {
            return function (g) {
                var go = function (t) {
                    return k(map((function () {
                        var $305 = map1(g);
                        return function ($306) {
                            return $305(duplicate(go($306)));
                        };
                    })())(project(t)));
                };
                return function ($307) {
                    return g(go($307));
                };
            };
        };
    };
};
var elgotHisto = function (dictRecursive) {
    var Functor0 = dictRecursive.Functor0();
    return elgotCata(dictRecursive)(Control_Comonad_Cofree.comonadCofree(Functor0))(Matryoshka_DistributiveLaw.distHisto(Functor0));
};
var elgotZygo = function (dictRecursive) {
    var $308 = elgotCata(dictRecursive)(Data_Tuple.comonadTuple);
    var $309 = Matryoshka_DistributiveLaw.distZygo(dictRecursive.Functor0());
    return function ($310) {
        return $308($309($310));
    };
};
var gElgotZygo = function (dictRecursive) {
    var elgotCata1 = elgotCata(dictRecursive);
    var distZygoT = Matryoshka_DistributiveLaw.distZygoT(dictRecursive.Functor0());
    return function (dictComonad) {
        var elgotCata2 = elgotCata1(Control_Comonad_Env_Trans.comonadEnvT(dictComonad));
        var distZygoT1 = distZygoT(dictComonad);
        return function (f) {
            return function (w) {
                return elgotCata2(distZygoT1(f)(w));
            };
        };
    };
};
var children = function (dictRecursive) {
    var project = Matryoshka_Class_Recursive.project(dictRecursive);
    return function (dictFoldable) {
        var $311 = Data_Foldable.foldMap(dictFoldable)(Data_List_Types.monoidList)(pure);
        return function ($312) {
            return $311(project($312));
        };
    };
};
var universe = function (dictRecursive) {
    var children1 = children(dictRecursive);
    return function (dictFoldable) {
        var children2 = children1(dictFoldable);
        return function (t) {
            return bindFlipped(universe(dictRecursive)(dictFoldable))(children2(t));
        };
    };
};
var cataM = function (dictRecursive) {
    var project = Matryoshka_Class_Recursive.project(dictRecursive);
    return function (dictMonad) {
        var bindFlipped1 = Control_Bind.bindFlipped(dictMonad.Bind1());
        var Applicative0 = dictMonad.Applicative0();
        return function (dictTraversable) {
            var traverse = Data_Traversable.traverse(dictTraversable)(Applicative0);
            return function (f) {
                var go = function (t) {
                    return bindFlipped1(f)(traverse(go)(project(t)));
                };
                return go;
            };
        };
    };
};
var cata = function (dictRecursive) {
    var map = Data_Functor.map(dictRecursive.Functor0());
    var project = Matryoshka_Class_Recursive.project(dictRecursive);
    return function (f) {
        var go = function (t) {
            return f(map(go)(project(t)));
        };
        return go;
    };
};
var gprepro = function (dictRecursive) {
    var cata1 = cata(dictRecursive);
    var project = Matryoshka_Class_Recursive.project(dictRecursive);
    return function (dictCorecursive) {
        var map = Data_Functor.map(dictCorecursive.Functor0());
        var embed = Matryoshka_Class_Corecursive.embed(dictCorecursive);
        return function (dictComonad) {
            var Extend0 = dictComonad.Extend0();
            var map1 = Data_Functor.map(Extend0.Functor0());
            var duplicate = Control_Extend.duplicate(Extend0);
            var extract = Control_Comonad.extract(dictComonad);
            return function (f) {
                return function (g) {
                    return function (h) {
                        var go = function (t) {
                            return map1(h)(f(map((function () {
                                var $313 = cata1(function ($315) {
                                    return embed(g($315));
                                });
                                return function ($314) {
                                    return duplicate(go($313($314)));
                                };
                            })())(project(t))));
                        };
                        return function ($316) {
                            return extract(go($316));
                        };
                    };
                };
            };
        };
    };
};
var lambek = function (dictRecursive) {
    var cata1 = cata(dictRecursive);
    return function (dictCorecursive) {
        return cata1(Data_Functor.map(dictCorecursive.Functor0())(Matryoshka_Class_Corecursive.embed(dictCorecursive)));
    };
};
var prepro = function (dictRecursive) {
    var cata1 = cata(dictRecursive);
    var project = Matryoshka_Class_Recursive.project(dictRecursive);
    return function (dictCorecursive) {
        var map = Data_Functor.map(dictCorecursive.Functor0());
        var embed = Matryoshka_Class_Corecursive.embed(dictCorecursive);
        return function (f) {
            return function (g) {
                var go = function (t) {
                    return g(map((function () {
                        var $317 = cata1(function ($319) {
                            return embed(f($319));
                        });
                        return function ($318) {
                            return go($317($318));
                        };
                    })())(project(t)));
                };
                return go;
            };
        };
    };
};
var annotateTopDownM = function (dictRecursive) {
    var project = Matryoshka_Class_Recursive.project(dictRecursive);
    return function (dictMonad) {
        var Bind1 = dictMonad.Bind1();
        var bindFlipped1 = Control_Bind.bindFlipped(Bind1);
        var map = Data_Functor.map((Bind1.Apply0()).Functor0());
        var Applicative0 = dictMonad.Applicative0();
        return function (dictTraversable) {
            var traverse = Data_Traversable.traverse(dictTraversable)(Applicative0);
            return function (f) {
                return function (z) {
                    var go = function (t) {
                        var ft = project(t);
                        return bindFlipped1((function () {
                            var $320 = Data_Function.flip(map)(traverse(go)(ft));
                            return function ($321) {
                                return $320(Control_Comonad_Cofree.mkCofree($321));
                            };
                        })())(f(z)(ft));
                    };
                    return go;
                };
            };
        };
    };
};
var annotateTopDown = function (dictRecursive) {
    var project = Matryoshka_Class_Recursive.project(dictRecursive);
    var map = Data_Functor.map(dictRecursive.Functor0());
    return function (f) {
        return function (z) {
            var go = function (t) {
                var ft = project(t);
                return Control_Comonad_Cofree.mkCofree(f(z)(ft))(map(go)(ft));
            };
            return go;
        };
    };
};
export {
    cata,
    cataM,
    gcata,
    gcataM,
    elgotCata,
    transCata,
    transCataT,
    transCataM,
    transCataTM,
    topDownCata,
    topDownCataM,
    prepro,
    gprepro,
    transPrepro,
    para,
    paraM,
    gpara,
    elgotPara,
    transPara,
    transParaT,
    zygo,
    gzygo,
    elgotZygo,
    gElgotZygo,
    mutu,
    histo,
    ghisto,
    elgotHisto,
    annotateTopDown,
    annotateTopDownM,
    isLeaf,
    children,
    universe,
    lambek
};
//# sourceMappingURL=index.js.map
