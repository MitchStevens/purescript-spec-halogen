// Generated by purs version 0.15.15
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Comonad_Cofree from "../Control.Comonad.Cofree/index.js";
import * as Control_Monad_Fork_Class from "../Control.Monad.Fork.Class/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_HeytingAlgebra from "../Data.HeytingAlgebra/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Ref from "../Effect.Ref/index.js";
import * as Halogen_Subscription from "../Halogen.Subscription/index.js";
import * as Test_Spec from "../Test.Spec/index.js";
import * as Test_Spec_Assertions from "../Test.Spec.Assertions/index.js";
import * as Test_Spec_Halogen_Predicate from "../Test.Spec.Halogen.Predicate/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit);
var for_ = /* #__PURE__ */ Data_Foldable.for_(Effect.applicativeEffect);
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect.applicativeEffect);
var describe = /* #__PURE__ */ Test_Spec.describe(Data_Identity.monadIdentity);
var discard2 = /* #__PURE__ */ discard(/* #__PURE__ */ Test_Spec.bindSpecT(Data_Identity.bindIdentity));
var it = /* #__PURE__ */ Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit);
var discard3 = /* #__PURE__ */ discard(Effect_Aff.bindAff);
var shouldEqual = /* #__PURE__ */ Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff);
var shouldEqual1 = /* #__PURE__ */ shouldEqual(Test_Spec_Halogen_Predicate.showIsSatisfied)(Test_Spec_Halogen_Predicate.eqIsSatisfied);
var ff = /* #__PURE__ */ Data_HeytingAlgebra.ff(Test_Spec_Halogen_Predicate.heytingAlgebraIncremental);
var tt = /* #__PURE__ */ Data_HeytingAlgebra.tt(Test_Spec_Halogen_Predicate.heytingAlgebraIncremental);
var runIncremental = /* #__PURE__ */ Test_Spec_Halogen_Predicate.runIncremental(Data_Eq.eqInt);
var pure1 = /* #__PURE__ */ Control_Applicative.pure(Effect_Aff.applicativeAff);
var pending = /* #__PURE__ */ Test_Spec.pending(Data_Identity.monadIdentity);
var shouldEqual2 = /* #__PURE__ */ shouldEqual(/* #__PURE__ */ Data_Show.showArray(Data_Show.showInt))(/* #__PURE__ */ Data_Eq.eqArray(Data_Eq.eqInt));
var or = /* #__PURE__ */ Data_Foldable.or(Data_Foldable.foldableArray)(Test_Spec_Halogen_Predicate.heytingAlgebraIncremental);
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var for_1 = /* #__PURE__ */ Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray);
var runIncrementalFromFoldable = /* #__PURE__ */ Test_Spec_Halogen_Predicate.runIncrementalFromFoldable(Data_Foldable.foldableArray)(Data_Eq.eqInt);
var readAff = function (a) {
    return bind(a)(function (ref) {
        return liftEffect(Effect_Ref.read(ref));
    });
};
var emitFoldable = function (dictFoldable) {
    var for_2 = for_(dictFoldable);
    return function (values) {
        return Halogen_Subscription.makeEmitter(function (callback) {
            return function __do() {
                for_2(values)(function (a) {
                    return function __do() {
                        Effect_Aff.launchAff_(Effect_Aff.delay(10.0))();
                        return callback(a)();
                    };
                })();
                return pure(Data_Unit.unit);
            };
        });
    };
};
var emitFoldable1 = /* #__PURE__ */ emitFoldable(Data_Foldable.foldableArray);
var spec = /* #__PURE__ */ describe("Test.Spec.Halogen.Predicate")(/* #__PURE__ */ (function () {
    var incremental = {
        equals: Test_Spec_Halogen_Predicate.equals(1),
        not: Data_HeytingAlgebra.not(Test_Spec_Halogen_Predicate.heytingAlgebraIncremental)(Test_Spec_Halogen_Predicate.equals(1)),
        or: Data_HeytingAlgebra.disj(Test_Spec_Halogen_Predicate.heytingAlgebraIncremental)(Test_Spec_Halogen_Predicate.equals(1))(Test_Spec_Halogen_Predicate.equals(2)),
        and: Data_HeytingAlgebra.conj(Test_Spec_Halogen_Predicate.heytingAlgebraIncremental)(Test_Spec_Halogen_Predicate.equals(1))(Test_Spec_Halogen_Predicate.equals(2)),
        then: Test_Spec_Halogen_Predicate.then_(Test_Spec_Halogen_Predicate.equals(1))(Test_Spec_Halogen_Predicate.equals(2))
    };
    return discard2(it("isSatisfied")(discard3(shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(ff))(new Test_Spec_Halogen_Predicate.Satisfied(false)))(function () {
        return discard3(shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(tt))(new Test_Spec_Halogen_Predicate.Satisfied(true)))(function () {
            return discard3(shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(Test_Spec_Halogen_Predicate.equals(0)))(Test_Spec_Halogen_Predicate.Unsatisfied.value))(function () {
                return discard3(shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(Test_Spec_Halogen_Predicate.then_(ff)(tt)))(new Test_Spec_Halogen_Predicate.Satisfied(false)))(function () {
                    return shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(Test_Spec_Halogen_Predicate.then_(tt)(tt)))(new Test_Spec_Halogen_Predicate.Satisfied(true));
                });
            });
        });
    })))(function () {
        return discard2(it("finaliseIncremental")(shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(Test_Spec_Halogen_Predicate.finaliseIncremental(Test_Spec_Halogen_Predicate.equals(1))))(Test_Spec_Halogen_Predicate.Unsatisfied.value)))(function () {
            return discard2(describe("incrementalPredicate")(it("should recompute isSat labels")(discard3(shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(Test_Spec_Halogen_Predicate.incrementalPredicate(Control_Comonad_Cofree.mkCofree(new Test_Spec_Halogen_Predicate.Satisfied(true))(Test_Spec_Halogen_Predicate.None.value))))(new Test_Spec_Halogen_Predicate.Satisfied(true)))(function () {
                return shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(Test_Spec_Halogen_Predicate.incrementalPredicate(Control_Comonad_Cofree.mkCofree(Test_Spec_Halogen_Predicate.Unsatisfied.value)(new Test_Spec_Halogen_Predicate.Not(Control_Comonad_Cofree.mkCofree(new Test_Spec_Halogen_Predicate.Satisfied(true))(Test_Spec_Halogen_Predicate.None.value))))))(new Test_Spec_Halogen_Predicate.Satisfied(false));
            }))))(function () {
                return discard2(describe("runIncremental")(discard2(it("equals")(discard3(shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(incremental.equals))(Test_Spec_Halogen_Predicate.Unsatisfied.value))(function () {
                    return discard3(shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(runIncremental(0)(incremental.equals)))(Test_Spec_Halogen_Predicate.Unsatisfied.value))(function () {
                        return shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(runIncremental(1)(incremental.equals)))(new Test_Spec_Halogen_Predicate.Satisfied(true));
                    });
                })))(function () {
                    return discard2(it("or")(discard3(shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(incremental.or))(Test_Spec_Halogen_Predicate.Unsatisfied.value))(function () {
                        return discard3(shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(runIncremental(1)(incremental.or)))(new Test_Spec_Halogen_Predicate.Satisfied(true)))(function () {
                            return shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(runIncremental(2)(incremental.or)))(new Test_Spec_Halogen_Predicate.Satisfied(true));
                        });
                    })))(function () {
                        return it("then_")(discard3(shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(runIncremental(2)(runIncremental(1)(incremental.then))))(new Test_Spec_Halogen_Predicate.Satisfied(true)))(function () {
                            return pure1(Data_Unit.unit);
                        }));
                    });
                })))(function () {
                    return discard2(describe("runPredicateFromFoldable")(pending("")))(function () {
                        return discard2(describe("runPredicateFromEmitter")(discard2(it("emitFoldable should faithfully emit values from a foldable")(bind(liftEffect(Effect_Ref["new"]([  ])))(function (emittedValues) {
                            var emitter = emitFoldable1([ 1, 2, 3, 4, 5 ]);
                            return bind(liftEffect(Halogen_Subscription.subscribe(emitter)(function (a) {
                                return Effect_Ref.modify_(function (v) {
                                    return Data_Array.snoc(v)(a);
                                })(emittedValues);
                            })))(function () {
                                return discard3(Effect_Aff.delay(100.0))(function () {
                                    return bind(liftEffect(Effect_Ref.read(emittedValues)))(function (values) {
                                        return shouldEqual2(values)([ 1, 2, 3, 4, 5 ]);
                                    });
                                });
                            });
                        })))(function () {
                            return it("should pass the following tests")((function () {
                                var emitterTest = function (dictEq) {
                                    var runIncrementalFromEmitter = Test_Spec_Halogen_Predicate.runIncrementalFromEmitter(dictEq);
                                    return function (dictShow) {
                                        var runIncrementalFromEmitter1 = runIncrementalFromEmitter(dictShow)(Control_Monad_Fork_Class.monadBracketAff)(Effect_Aff.monadEffectAff);
                                        return function (values) {
                                            return function (p) {
                                                return function (isSat) {
                                                    return runIncrementalFromEmitter1(emitFoldable1(values))(p)(function (ref) {
                                                        return bind(liftEffect(Effect_Ref.read(ref)))(function (incremental1) {
                                                            return shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(incremental1))(isSat);
                                                        });
                                                    });
                                                };
                                            };
                                        };
                                    };
                                };
                                var emitterTest1 = emitterTest(Data_Eq.eqInt)(Data_Show.showInt);
                                return discard3(emitterTest1([  ])(incremental.not)(Test_Spec_Halogen_Predicate.Unsatisfied.value))(function () {
                                    return discard3(emitterTest1([ 1 ])(incremental.not)(new Test_Spec_Halogen_Predicate.Satisfied(false)))(function () {
                                        return discard3(emitterTest1([  ])(incremental.or)(Test_Spec_Halogen_Predicate.Unsatisfied.value))(function () {
                                            return discard3(emitterTest1([ 1 ])(incremental.or)(new Test_Spec_Halogen_Predicate.Satisfied(true)))(function () {
                                                return discard3(emitterTest1([  ])(incremental.and)(Test_Spec_Halogen_Predicate.Unsatisfied.value))(function () {
                                                    return discard3(emitterTest1([ 1 ])(incremental.and)(Test_Spec_Halogen_Predicate.Unsatisfied.value))(function () {
                                                        return discard3(emitterTest1([ 2 ])(incremental.and)(Test_Spec_Halogen_Predicate.Unsatisfied.value))(function () {
                                                            return discard3(emitterTest1([ 1, 2 ])(incremental.and)(new Test_Spec_Halogen_Predicate.Satisfied(true)))(function () {
                                                                return discard3(emitterTest1([  ])(incremental.then)(Test_Spec_Halogen_Predicate.Unsatisfied.value))(function () {
                                                                    return discard3(emitterTest1([ 1 ])(incremental.then)(Test_Spec_Halogen_Predicate.Unsatisfied.value))(function () {
                                                                        return discard3(emitterTest1([ 2 ])(incremental.then)(Test_Spec_Halogen_Predicate.Unsatisfied.value))(function () {
                                                                            return discard3(emitterTest1([ 2, 1 ])(incremental.then)(Test_Spec_Halogen_Predicate.Unsatisfied.value))(function () {
                                                                                return emitterTest1([ 1, 2 ])(incremental.then)(new Test_Spec_Halogen_Predicate.Satisfied(true));
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            })());
                        })))(function () {
                            return describe("Advanced Predicates")((function () {
                                var even = or(map(Test_Spec_Halogen_Predicate.equals)([ 0, 2, 4, 6, 8 ]));
                                var odd = or(map(Test_Spec_Halogen_Predicate.equals)([ 1, 3, 5, 7, 9 ]));
                                var alternatingEvenOdd = (function () {
                                    var evenThenOdd = Test_Spec_Halogen_Predicate.then_(even)(odd);
                                    return Test_Spec_Halogen_Predicate.then_(evenThenOdd)(evenThenOdd);
                                })();
                                return discard2(it("passes for even numbers")(for_1([ 0, 2, 4, 6, 8 ])(function (n) {
                                    return shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(runIncremental(n)(even)))(new Test_Spec_Halogen_Predicate.Satisfied(true));
                                })))(function () {
                                    return discard2(it("passes for odd numbers")(for_1([ 1, 3, 5, 7, 9 ])(function (n) {
                                        return shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(runIncremental(n)(odd)))(new Test_Spec_Halogen_Predicate.Satisfied(true));
                                    })))(function () {
                                        return it("passes for alternating sequences of numbers")(discard3(shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(runIncrementalFromFoldable([ 0, 1, 2, 3 ])(alternatingEvenOdd)))(new Test_Spec_Halogen_Predicate.Satisfied(true)))(function () {
                                            return discard3(shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(runIncrementalFromFoldable([ 0, 1, 5, 7, 2, 8, 3 ])(alternatingEvenOdd)))(new Test_Spec_Halogen_Predicate.Satisfied(true)))(function () {
                                                return shouldEqual1(Test_Spec_Halogen_Predicate.isSatisfied(runIncrementalFromFoldable([ 0, 2, 1, 3 ])(alternatingEvenOdd)))(Test_Spec_Halogen_Predicate.Unsatisfied.value);
                                            });
                                        }));
                                    });
                                });
                            })());
                        });
                    });
                });
            });
        });
    });
})());
export {
    spec,
    emitFoldable,
    readAff
};
//# sourceMappingURL=index.js.map
