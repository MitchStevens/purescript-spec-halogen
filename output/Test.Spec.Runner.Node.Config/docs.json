{"comments":null,"declarations":[{"children":[],"comments":"A CLI option parser is implemented as a function that _modifies_ the result\nrather than returning it. This way we can run multiple parsers in sequence\nand accumulate the changes on top of defaults, while keeping the result an\nopen (extensible) record.\n","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Options","Applicative","Types"],"Parser"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[57,42],"name":".spago/p/spec-node-0.0.2/src/Node/Config.purs","start":[57,1]},"title":"OptionParser"},{"children":[],"comments":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Test","Spec","Runner","Node","Config"],"TestRunConfig'"],"tag":"TypeConstructor"},{"annotation":[],"tag":"REmpty"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[51,39],"name":".spago/p/spec-node-0.0.2/src/Node/Config.purs","start":[51,1]},"title":"TestRunConfig"},{"children":[],"comments":null,"info":{"arguments":[["r",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Test","Spec","Runner","Node","Config"],"TestRunConfigRow"],"tag":"TypeConstructor"},{"annotation":[],"contents":"r","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":{"keyword":"type","kind":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Row"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"sourceSpan":{"end":[50,49],"name":".spago/p/spec-node-0.0.2/src/Node/Config.purs","start":[50,1]},"title":"TestRunConfig'"},{"children":[],"comments":null,"info":{"arguments":[["r",null]],"declType":"typeSynonym","type":{"annotation":[],"contents":["failFast",{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"},{"annotation":[],"contents":["onlyFailures",{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"},{"annotation":[],"contents":["filter",{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":["timeout",{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Time","Duration"],"Milliseconds"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"r","tag":"TypeVar"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"RCons"}},"kind":{"keyword":"type","kind":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Row"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Row"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Type"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"sourceSpan":{"end":[48,4],"name":".spago/p/spec-node-0.0.2/src/Node/Config.purs","start":[42,1]},"title":"TestRunConfigRow"},{"children":[],"comments":"The set of default parsers provided in the box. If you're using your own\nparsers for your own CLI options, concatenate them to this array before\npassing to `fromCommandLine'`.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"r","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Test","Spec","Runner","Node","Config"],"OptionParser"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Test","Spec","Runner","Node","Config"],"TestRunConfig'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"r","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[81,73],"name":".spago/p/spec-node-0.0.2/src/Node/Config.purs","start":[81,1]},"title":"commandLineOptionParsers"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":[["Test","Spec","Runner","Node","Config"],"TestRunConfig"],"tag":"TypeConstructor"}},"kind":null,"sourceSpan":{"end":[70,31],"name":".spago/p/spec-node-0.0.2/src/Node/Config.purs","start":[70,1]},"title":"defaultConfig"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Test","Spec","Runner","Node","Config"],"TestRunConfig"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[59,57],"name":".spago/p/spec-node-0.0.2/src/Node/Config.purs","start":[59,1]},"title":"fromCommandLine"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"a","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Test","Spec","Runner","Node","Config"],"OptionParser"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[62,79],"name":".spago/p/spec-node-0.0.2/src/Node/Config.purs","start":[62,1]},"title":"fromCommandLine'"},{"children":[],"comments":"Converts the `spec-node` configuration to `spec` configuration. The two are\nnot the same, because this very conversion is an effectful operation, as,\nfor example, it depends on the last test run results.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"m","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"r","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Effect","Aff","Class"],"MonadAff"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Test","Spec","Runner","Node","Config"],"TestRunConfig'"],"tag":"TypeConstructor"},{"annotation":[],"contents":"r","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Test","Spec","Config"],"Config"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[95,71],"name":".spago/p/spec-node-0.0.2/src/Node/Config.purs","start":[95,1]},"title":"toSpecConfig"}],"name":"Test.Spec.Runner.Node.Config","reExports":[]}