{"comments":null,"declarations":[{"children":[],"comments":"Configuration options for the test runner.\n\nThis type defines various settings that control the behavior of the test runner.\n\nConfig has the following fields\n- `slow`: Threshold of time beyond which a test is considered \"slow\".\n- `timeout`: An optional timeout, applied to each individual test. When omitted, tests are allowed to run forever.\n- `exit`: When `true`, the runner will exit the Node process after running tests. If `false`, the runner will merely return test results.\n- `failFast`: When `true`, first failed test stops the whole run.\n- `filterTree`: The spec tree goes through this function before execution. Can be used to filter out test cases, rearrange, annotate, etc.\n","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Record"],"tag":"TypeConstructor"},{"annotation":[],"contents":["slow",{"annotation":[],"contents":[["Data","Time","Duration"],"Milliseconds"],"tag":"TypeConstructor"},{"annotation":[],"contents":["timeout",{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Time","Duration"],"Milliseconds"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":["exit",{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"},{"annotation":[],"contents":["failFast",{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"},{"annotation":[],"contents":["filterTree",{"annotation":[],"contents":[["Test","Spec","Config"],"TreeFilter"],"tag":"TypeConstructor"},{"annotation":[],"tag":"REmpty"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"RCons"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[30,4],"name":".spago/p/spec-8.0.0/src/Test/Spec/Config.purs","start":[24,1]},"title":"Config"},{"children":[{"comments":null,"info":{"arguments":[{"annotation":[],"contents":{"annotation":[],"contents":{"identifier":"g","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"i","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Test","Spec"],"SpecTree"],"tag":"TypeConstructor"},{"annotation":[],"contents":"g","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"i","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Test","Spec"],"SpecTree"],"tag":"TypeConstructor"},{"annotation":[],"contents":"g","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"i","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"tag":"ParensInType"}],"declType":"dataConstructor"},"sourceSpan":{"end":[32,86],"name":".spago/p/spec-8.0.0/src/Test/Spec/Config.purs","start":[32,20]},"title":"TreeFilter"}],"comments":null,"info":{"dataDeclType":"newtype","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[32,86],"name":".spago/p/spec-8.0.0/src/Test/Spec/Config.purs","start":[32,1]},"title":"TreeFilter"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":[["Test","Spec","Config"],"Config"],"tag":"TypeConstructor"}},"kind":null,"sourceSpan":{"end":[34,24],"name":".spago/p/spec-8.0.0/src/Test/Spec/Config.purs","start":[34,1]},"title":"defaultConfig"}],"name":"Test.Spec.Config","reExports":[]}