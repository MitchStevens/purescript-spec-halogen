// Generated by purs version 0.15.15
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Monad_Error_Class from "../Control.Monad.Error.Class/index.js";
import * as Control_Monad_Fork_Class from "../Control.Monad.Fork.Class/index.js";
import * as Control_Monad_Reader_Class from "../Control.Monad.Reader.Class/index.js";
import * as Control_Monad_Reader_Trans from "../Control.Monad.Reader.Trans/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Class_Console from "../Effect.Class.Console/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Effect_Ref from "../Effect.Ref/index.js";
import * as Halogen_Data_Slot from "../Halogen.Data.Slot/index.js";
import * as Halogen_Query from "../Halogen.Query/index.js";
import * as Halogen_Query_ChildQuery from "../Halogen.Query.ChildQuery/index.js";
import * as Halogen_Subscription from "../Halogen.Subscription/index.js";
import * as Test_Spec_Halogen_Driver from "../Test.Spec.Halogen.Driver/index.js";
import * as Test_Spec_Halogen_Predicate from "../Test.Spec.Halogen.Predicate/index.js";
var bindReaderT = /* #__PURE__ */ Control_Monad_Reader_Trans.bindReaderT(Effect_Aff.bindAff);
var bind = /* #__PURE__ */ Control_Bind.bind(bindReaderT);
var asks = /* #__PURE__ */ Control_Monad_Reader_Class.asks(/* #__PURE__ */ Control_Monad_Reader_Trans.monadAskReaderT(Effect_Aff.monadAff));
var monadEffectReader = /* #__PURE__ */ Control_Monad_Reader_Trans.monadEffectReader(Effect_Aff.monadEffectAff);
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(monadEffectReader);
var log = /* #__PURE__ */ Effect_Class_Console.log(Effect_Class.monadEffectEffect);
var monadBracketReaderT = /* #__PURE__ */ Control_Monad_Fork_Class.monadBracketReaderT(Control_Monad_Fork_Class.monadBracketAff);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(bindReaderT);
var liftAff = /* #__PURE__ */ Effect_Aff_Class.liftAff(/* #__PURE__ */ Effect_Aff_Class.monadAffReader(Effect_Aff_Class.monadAffAff));
var map = /* #__PURE__ */ Data_Functor.map(Effect.functorEffect);
var pure = /* #__PURE__ */ Control_Applicative.pure(/* #__PURE__ */ Control_Monad_Reader_Trans.applicativeReaderT(Effect_Aff.applicativeAff));
var throwError = /* #__PURE__ */ Control_Monad_Error_Class.throwError(/* #__PURE__ */ Control_Monad_Reader_Trans.monadThrowReaderT(Effect_Aff.monadThrowAff));
var show = /* #__PURE__ */ Data_Show.show(Test_Spec_Halogen_Predicate.showIsSatisfied);
var functorReaderT = /* #__PURE__ */ Control_Monad_Reader_Trans.functorReaderT(Effect_Aff.functorAff);
var $$void = /* #__PURE__ */ Data_Functor["void"](functorReaderT);
var lookup = /* #__PURE__ */ Halogen_Data_Slot.lookup();
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var map1 = /* #__PURE__ */ Data_Functor.map(functorReaderT);
var join = /* #__PURE__ */ Control_Bind.join(Data_Maybe.bindMaybe);
var triggered = function (a) {
    return Test_Spec_Halogen_Predicate.equals(new Test_Spec_Halogen_Driver.Triggered(a));
};
var shouldInduce = function (dictEq) {
    var eqAugmentedOutput = Test_Spec_Halogen_Driver.eqAugmentedOutput(dictEq);
    return function (dictEq1) {
        var eqAugmentedOutput1 = eqAugmentedOutput(dictEq1);
        return function (dictEq2) {
            var runIncrementalFromEmitter = Test_Spec_Halogen_Predicate.runIncrementalFromEmitter(eqAugmentedOutput1(dictEq2));
            return function (dictShow) {
                var showAugmentedOutput = Test_Spec_Halogen_Driver.showAugmentedOutput(dictShow);
                return function (dictShow1) {
                    var showAugmentedOutput1 = showAugmentedOutput(dictShow1);
                    return function (dictShow2) {
                        var showAugmentedOutput2 = showAugmentedOutput1(dictShow2);
                        var show1 = Data_Show.show(showAugmentedOutput2);
                        var runIncrementalFromEmitter1 = runIncrementalFromEmitter(showAugmentedOutput2)(monadBracketReaderT)(monadEffectReader);
                        return function (testHalogenM) {
                            return function (pred) {
                                return bind(asks(function (v) {
                                    return v.settings.timeout;
                                }))(function (timeout) {
                                    return bind(asks(function (v) {
                                        return v.io.messages;
                                    }))(function (messages) {
                                        return bind(liftEffect(Halogen_Subscription.subscribe(messages)(function (a) {
                                            return log(show1(a));
                                        })))(function () {
                                            return runIncrementalFromEmitter1(messages)(pred)(function (ref) {
                                                return bind(testHalogenM)(function (res) {
                                                    return discard(liftAff(Effect_Aff.delay(timeout)))(function () {
                                                        return bind(liftEffect(map(Test_Spec_Halogen_Predicate.isSatisfied)(Effect_Ref.read(ref))))(function (isSat) {
                                                            if (isSat instanceof Test_Spec_Halogen_Predicate.Satisfied && isSat.value0) {
                                                                return pure(res);
                                                            };
                                                            return throwError(Effect_Exception.error(show(isSat)));
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            };
                        };
                    };
                };
            };
        };
    };
};
var runAugmentedQuery = function (augmentedQuery) {
    return bind(asks(function (v) {
        return v.io.query;
    }))(function (v) {
        return liftAff(v(augmentedQuery));
    });
};
var trigger = function (action) {
    return $$void(runAugmentedQuery(new Test_Spec_Halogen_Driver.Trigger(action)));
};
var raised = function (a) {
    return Test_Spec_Halogen_Predicate.equals(new Test_Spec_Halogen_Driver.Raised(a));
};
var modified = function (a) {
    return Test_Spec_Halogen_Predicate.equals(new Test_Spec_Halogen_Driver.Modified(a));
};
var componentTell = function (tell) {
    return $$void(runAugmentedQuery(new Test_Spec_Halogen_Driver.ComponentTell(tell)));
};
var componentRequest = function (req) {
    return runAugmentedQuery(new Test_Spec_Halogen_Driver.ComponentRequest(req));
};
var childTell = function () {
    return function (dictIsSymbol) {
        var lookup1 = lookup(dictIsSymbol);
        return function (dictOrd) {
            var lookup2 = lookup1(dictOrd);
            return function (label) {
                return function (p) {
                    return function (tell) {
                        var childQuery = new Halogen_Query_ChildQuery.ChildQuery(function (dictApplicative) {
                            var pure1 = Control_Applicative.pure(dictApplicative);
                            return function (k) {
                                var $70 = Data_Maybe.maybe(pure1(Data_Maybe.Nothing.value))(k);
                                var $71 = lookup2(label)(p);
                                return function ($72) {
                                    return $70($71($72));
                                };
                            };
                        }, Halogen_Query.mkTell(tell), function (v) {
                            return Data_Unit.unit;
                        });
                        var childQueryBox1 = function (v) {
                            return Halogen_Query_ChildQuery.mkChildQueryBox(childQuery);
                        };
                        return $$void(runAugmentedQuery(new Test_Spec_Halogen_Driver.ChildTell(childQueryBox1)));
                    };
                };
            };
        };
    };
};
var childRequest = function () {
    return function (dictIsSymbol) {
        var lookup1 = lookup(dictIsSymbol);
        return function (dictOrd) {
            var lookup2 = lookup1(dictOrd);
            return function (label) {
                return function (p) {
                    return function (req) {
                        var childQuery = new Halogen_Query_ChildQuery.ChildQuery(function (dictApplicative) {
                            var pure1 = Control_Applicative.pure(dictApplicative);
                            return function (k) {
                                var $73 = Data_Maybe.maybe(pure1(Data_Maybe.Nothing.value))(k);
                                var $74 = lookup2(label)(p);
                                return function ($75) {
                                    return $73($74($75));
                                };
                            };
                        }, Halogen_Query.mkRequest(req), identity);
                        var childQueryBox1 = function (v) {
                            return Halogen_Query_ChildQuery.mkChildQueryBox(childQuery);
                        };
                        return map1(join)(runAugmentedQuery(new Test_Spec_Halogen_Driver.ChildRequest(childQueryBox1)));
                    };
                };
            };
        };
    };
};
var childQueryBox = function () {
    return function (dictIsSymbol) {
        var lookup1 = lookup(dictIsSymbol);
        return function (dictOrd) {
            var lookup2 = lookup1(dictOrd);
            return function (label) {
                return function (p) {
                    return function (q) {
                        return Halogen_Query_ChildQuery.mkChildQueryBox(new Halogen_Query_ChildQuery.ChildQuery(function (dictApplicative) {
                            var pure1 = Control_Applicative.pure(dictApplicative);
                            return function (k) {
                                return function (storage) {
                                    return Data_Maybe.maybe(pure1(Data_Maybe.Nothing.value))(k)(lookup2(label)(p)(storage));
                                };
                            };
                        }, q, identity));
                    };
                };
            };
        };
    };
};
export {
    shouldInduce,
    runAugmentedQuery,
    trigger,
    componentTell,
    componentRequest,
    childQueryBox,
    childTell,
    childRequest,
    triggered,
    modified,
    raised
};
//# sourceMappingURL=index.js.map
