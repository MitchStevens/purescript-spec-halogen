// Generated by purs version 0.15.15
import * as Component_Counter from "../Component.Counter/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Reader_Trans from "../Control.Monad.Reader.Trans/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Test_Spec from "../Test.Spec/index.js";
import * as Test_Spec_Assertions from "../Test.Spec.Assertions/index.js";
import * as Test_Spec_Halogen_Assertions from "../Test.Spec.Halogen.Assertions/index.js";
import * as Test_Spec_Halogen_Driver from "../Test.Spec.Halogen.Driver/index.js";
var isPonderingIsSymbol = {
    reflectSymbol: function () {
        return "isPondering";
    }
};
var countIsSymbol = {
    reflectSymbol: function () {
        return "count";
    }
};
var eqRec = /* #__PURE__ */ Data_Eq.eqRec()(/* #__PURE__ */ Data_Eq.eqRowCons(/* #__PURE__ */ Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(isPonderingIsSymbol)(Data_Eq.eqBoolean))()(countIsSymbol)(Data_Eq.eqInt));
var componentSpec = /* #__PURE__ */ Component_Counter.componentSpec(Effect_Aff_Class.monadAffAff);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit);
var bindReaderT = /* #__PURE__ */ Control_Monad_Reader_Trans.bindReaderT(Effect_Aff.bindAff);
var bind = /* #__PURE__ */ Control_Bind.bind(bindReaderT);
var shouldEqual = /* #__PURE__ */ Test_Spec_Assertions.shouldEqual(/* #__PURE__ */ Control_Monad_Reader_Trans.monadThrowReaderT(Effect_Aff.monadThrowAff));
var shouldEqual1 = /* #__PURE__ */ shouldEqual(Data_Show.showInt)(Data_Eq.eqInt);
var discard1 = /* #__PURE__ */ discard(bindReaderT);
var shouldInduce = /* #__PURE__ */ Test_Spec_Halogen_Assertions.shouldInduce(eqRec)(Component_Counter.eqAction)(Component_Counter.eqOutput)(/* #__PURE__ */ Data_Show.showRecord()()(/* #__PURE__ */ Data_Show.showRecordFieldsCons(countIsSymbol)(/* #__PURE__ */ Data_Show.showRecordFieldsConsNil(isPonderingIsSymbol)(Data_Show.showBoolean))(Data_Show.showInt)))(Component_Counter.showAction)(Component_Counter.showOutput);
var expectError = /* #__PURE__ */ Test_Spec_Assertions.expectError(/* #__PURE__ */ Control_Monad_Reader_Trans.monadErrorReaderT(Effect_Aff.monadErrorAff));
var shouldEqual2 = /* #__PURE__ */ shouldEqual(/* #__PURE__ */ Data_Maybe.showMaybe(Data_Show.showInt))(/* #__PURE__ */ Data_Maybe.eqMaybe(Data_Eq.eqInt));
var tests = function (dictMonad) {
    var describe = Test_Spec.describe(dictMonad);
    var discard2 = discard(Test_Spec.bindSpecT(dictMonad.Bind1()));
    var it = Test_Spec.it(dictMonad)(Test_Spec.exampleFunc);
    return describe("Test.Spec.Halogen.Assertion")(Test_Spec_Halogen_Driver.withComponent(dictMonad)(eqRec)(componentSpec)(Data_Unit.unit)(discard2(describe("Counter component")(describe("State")(discard2(it("should have state")(Control_Monad_Reader_Trans.runReaderT(bind(Test_Spec_Halogen_Driver.getComponentState)(function (s) {
        return shouldEqual1(s.count)(0);
    }))))(function () {
        return describe("it should not retain state between tests")(discard2(it("test1")(Control_Monad_Reader_Trans.runReaderT(discard1(Test_Spec_Halogen_Assertions.trigger(new Component_Counter.SetValue("1")))(function () {
            return bind(Test_Spec_Halogen_Driver.getComponentState)(function (s) {
                return shouldEqual1(s.count)(1);
            });
        }))))(function () {
            return it("test2")(Control_Monad_Reader_Trans.runReaderT(bind(Test_Spec_Halogen_Driver.getComponentState)(function (s) {
                return shouldEqual1(s.count)(0);
            })));
        }));
    }))))(function () {
        return discard2(describe("trigger")(discard2(it("")(Control_Monad_Reader_Trans.runReaderT(shouldInduce(Test_Spec_Halogen_Assertions.trigger(new Component_Counter.SetValue("1")))(Test_Spec_Halogen_Assertions.triggered(new Component_Counter.SetValue("1"))))))(function () {
            return discard2(it("")(Control_Monad_Reader_Trans.runReaderT(shouldInduce(Test_Spec_Halogen_Assertions.trigger(new Component_Counter.SetValue("1")))(Test_Spec_Halogen_Assertions.raised(Component_Counter.CountChanged.value)))))(function () {
                return it("Quadruple should")(Control_Monad_Reader_Trans.runReaderT(shouldInduce(Test_Spec_Halogen_Assertions.trigger(Component_Counter.Quadruple.value))(Test_Spec_Halogen_Assertions.triggered(Component_Counter.Double.value))));
            });
        })))(function () {
            return discard2(describe("componentTell")(discard2(it("")(Control_Monad_Reader_Trans.runReaderT(expectError(shouldInduce(Test_Spec_Halogen_Assertions.componentTell(Component_Counter.DoNothing.create))(Test_Spec_Halogen_Assertions.raised(Component_Counter.CountChanged.value))))))(function () {
                return discard2(it("")(Control_Monad_Reader_Trans.runReaderT(Test_Spec_Halogen_Driver.setTimeout(shouldInduce(Test_Spec_Halogen_Assertions.componentTell(Component_Counter.Ponder.create(200.0)))(Test_Spec_Halogen_Assertions.raised(Component_Counter.FinishedPondering.value)))(210.0))))(function () {
                    return it("should detect outputs")(Control_Monad_Reader_Trans.runReaderT(discard1(Test_Spec_Halogen_Assertions.componentTell(Component_Counter.Increment.create))(function () {
                        return discard1(Test_Spec_Halogen_Assertions.componentTell(Component_Counter.Increment.create))(function () {
                            return discard1(Test_Spec_Halogen_Assertions.trigger(Component_Counter.Double.value))(function () {
                                return discard1(Test_Spec_Halogen_Assertions.componentTell(Component_Counter.Increment.create))(function () {
                                    return shouldInduce(Test_Spec_Halogen_Assertions.trigger(Component_Counter.Double.value))(Test_Spec_Halogen_Assertions.raised(Component_Counter.Equals10.value));
                                });
                            });
                        });
                    })));
                });
            })))(function () {
                return describe("componentRequest")(discard2(it("")(Control_Monad_Reader_Trans.runReaderT(bind(Test_Spec_Halogen_Assertions.componentRequest(Component_Counter.GetCount.create))(function (count) {
                    return shouldEqual2(count)(new Data_Maybe.Just(0));
                }))))(function () {
                    return it("")(Control_Monad_Reader_Trans.runReaderT(discard1(Test_Spec_Halogen_Assertions.trigger(new Component_Counter.SetValue("22")))(function () {
                        return bind(Test_Spec_Halogen_Assertions.componentRequest(Component_Counter.GetCount.create))(function (count) {
                            return shouldEqual2(count)(new Data_Maybe.Just(22));
                        });
                    })));
                }));
            });
        });
    })));
};
var spec = /* #__PURE__ */ tests(Data_Identity.monadIdentity);
export {
    spec,
    tests
};
//# sourceMappingURL=index.js.map
