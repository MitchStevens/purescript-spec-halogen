// Generated by purs version 0.15.15
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Node_Process from "../Node.Process/index.js";
import * as Test_Spec_Runner from "../Test.Spec.Runner/index.js";
import * as Test_Spec_Runner_Node_Config from "../Test.Spec.Runner.Node.Config/index.js";
import * as Test_Spec_Runner_Node_Persist from "../Test.Spec.Runner.Node.Persist/index.js";
import * as Test_Spec_Summary from "../Test.Spec.Summary/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var mapFlipped = /* #__PURE__ */ Data_Functor.mapFlipped(Effect_Aff.functorAff);
var toSpecConfig = /* #__PURE__ */ Test_Spec_Runner_Node_Config.toSpecConfig(Effect_Aff_Class.monadAffAff);
var un = /* #__PURE__ */ Data_Newtype.un();
var evalSpecT = /* #__PURE__ */ Test_Spec_Runner.evalSpecT(Data_Identity.functorIdentity);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff);
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect_Aff.applicativeAff);
var fromCommandLine$prime = /* #__PURE__ */ Test_Spec_Runner_Node_Config["fromCommandLine$prime"](Effect_Aff.monadEffectAff);
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
var runSpecAndGetResults = function (config) {
    return function (reporters) {
        return function (spec) {
            return bind(mapFlipped(toSpecConfig(config))(function (v) {
                return {
                    failFast: v.failFast,
                    filterTree: v.filterTree,
                    slow: v.slow,
                    timeout: v.timeout,
                    exit: false
                };
            }))(function (specCfg) {
                return bind(un(Data_Identity.Identity)(evalSpecT(specCfg)(reporters)(spec)))(function (results) {
                    return discard(Test_Spec_Runner_Node_Persist.persistResults(results))(function () {
                        return pure(results);
                    });
                });
            });
        };
    };
};
var runSpecAndExitProcess$prime = function (args) {
    return function (reporters) {
        return function (spec) {
            return Effect_Aff.launchAff_(bind((function () {
                if (args.parseCLIOptions) {
                    return fromCommandLine$prime(args.defaultConfig)(Test_Spec_Runner_Node_Config.commandLineOptionParsers);
                };
                return pure(args.defaultConfig);
            })())(function (config) {
                return bind(runSpecAndGetResults(config)(reporters)(spec))(function (res) {
                    return liftEffect(Node_Process["exit$prime"]((function () {
                        var $12 = Test_Spec_Summary.successful(res);
                        if ($12) {
                            return 0;
                        };
                        return 1;
                    })()));
                });
            }));
        };
    };
};
var runSpecAndExitProcess = /* #__PURE__ */ runSpecAndExitProcess$prime({
    defaultConfig: Test_Spec_Runner_Node_Config.defaultConfig,
    parseCLIOptions: true
});
export {
    runSpecAndExitProcess,
    runSpecAndExitProcess$prime,
    runSpecAndGetResults
};
//# sourceMappingURL=index.js.map
