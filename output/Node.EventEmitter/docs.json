{"comments":"## Handling events emitted by an `EventEmitter`\n\nOne can add callbacks to an `EventEmitter` on two major axes:\n- whether listener is added to the **end** (i.e. `on`) or **start** (i.e. `prependListener`) of the array\n- whether a listener is automatically removed after the first event (i.e. `once` or `prependOnceListener`).\n\nThis module provides functions for each of the above 4 callback-adding functions\nIf `<fn>` is either `on`, `once`, `prependListener`, or `prependOnceListener`, then this module exposes\n1. `<fn>` - returns a callback that removes the listener\n2. `<fn>_` - does not return a callback that can remove the listener\n\n## Defining events emitted by an `EventEmitter`\n\nBelow, we'll provide an example for how to define an event handler for a type. Let's assume the following:\n- There is a type `Foo` that exends `EventEmitter`\n- `Foo` values can handle \"bar\" events\n- a \"bar\" event takes the following callback: `EffectFn2 (Nullable Error) String Unit`\n- the `String` value is always either \"red\", \"green\", or \"blue\"\n\nThen we would write\n```\ndata Color \n  = Red \n  | Green \n  | Blue\n\n-- Note: see docs on `EventHandle` \n-- for the below naming convention justification \n-- of suffixing an event name with `H`.\nbarH \n  :: EventHandle \n       Foo \n       (Maybe Error -> Color -> Effect Unit) \n       (EffectFn1 (Nullable Error) String Unit)\nbarH = EventHandle \"bar\" $ \\psCb -> \n  mkEffectFn2 \\nullableError str ->\n    psCb (toMaybe nullableError) case str of\n      \"red\" -> Red\n      \"green\" -> Green\n      \"blue\" -> Blue\n      _ -> \n        unsafeCrashWith $ \n          \"Impossible String value for event 'bar': \" <> show str\n```\n\n## Emitting events via an `EventEmitter`\n\nUnfortunately, there isn't a good way to emit events safely in PureScript. If one wants to emit an event\nin PureScript code that will be consumed by PureScript code, there are better abstractions to use than `EventEmitter`.\nIf one wants to emit an event in PureScript code that will be consumed by JavaScript code, then\nthe `unsafeEmitFn` function can be used to call n-ary functions. However, this is very unsafe. See its docs for more context.\n","declarations":[{"children":[],"comments":null,"info":{"dataDeclType":"data","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[84,41],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[84,1]},"title":"EventEmitter"},{"children":[],"comments":"Create a new event emitter\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","EventEmitter"],"EventEmitter"],"tag":"TypeConstructor"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[87,42],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[87,1]},"title":"new"},{"children":[],"comments":null,"info":{"dataDeclType":"data","declType":"data","roles":[],"typeArguments":[]},"kind":null,"sourceSpan":{"end":[89,40],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[89,1]},"title":"SymbolOrStr"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","EventEmitter"],"EventEmitter"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Array"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","Symbol"],"JsSymbol"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[93,61],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[93,1]},"title":"eventNames"},{"children":[],"comments":"By default, an event emitter can only have a maximum of 10 listeners\nfor a given event.\n","info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","EventEmitter"],"EventEmitter"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[107,46],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[107,1]},"title":"getMaxListeners"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","EventEmitter"],"EventEmitter"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[112,54],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[112,1]},"title":"listenerCount"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"Int"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","EventEmitter"],"EventEmitter"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[117,54],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[117,1]},"title":"setMaxListeners"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","EventEmitter"],"EventEmitter"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[120,53],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[120,1]},"title":"setUnlimitedListeners"},{"children":[],"comments":"THIS IS UNSAFE! REALLY UNSAFE!\nGets the `emit` function for a particular `EventEmitter`, so that one can call n-ary functions.\n\nGiven `http2session.goaway([code[, lastStreamID[, opaqueData]]])` as an example...\n- https://nodejs.org/dist/latest-v18.x/docs/api/http2.html#event-goaway\n- https://nodejs.org/dist/latest-v18.x/docs/api/http2.html#http2sessiongoawaycode-laststreamid-opaquedata\n\nWe can then write a single function that handles all four cases:\n```\ngoAway\n  :: Http2Session\n  -> Maybe Code\n  -> Maybe LastStreamId\n  -> Maybe OpaqueData\n  -> Effect Unit\ngoAway h2s = case _, _, _ of\n  Just c, Just id, Just d ->\n    runEffectFn4 (unsafeEmitFn h2s :: EffectFn4 String Code LastStreamId OpaqueData Unit) \"goaway\" c id d\n  Just c, Just id, Nothing ->\n    -- If you're feeling lucky, omit the type annotations completely\n    runEffectFn3 (unsafeEmitFn h2s) \"goaway\" c id\n  Just c, Nothing, Nothing ->\n    runEffectFn2 (unsafeEmitFn h2s :: EffectFn2 String Code LastStreamId Unit) \"goaway\" c\n  _, _, _ ->\n    runEffectFn1 (unsafeEmitFn h2s :: EffectFn1 String Unit) \"goaway\"\n```\n\nSynchronously calls each of the listeners registered for the event named `eventName`, \nin the order they were registered, passing the supplied arguments to each.\nReturns `true` if the event had listeners, `false` otherwise.\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"f","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","EventEmitter"],"EventEmitter"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"f","tag":"TypeVar"},{"annotation":[],"contents":[["Prim"],"Boolean"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[153,67],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[153,1]},"title":"unsafeEmitFn"},{"children":[{"comments":null,"info":{"arguments":[{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"pureScriptCallback","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"javaScriptCallback","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"declType":"dataConstructor"},"sourceSpan":{"end":[171,14],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[170,68]},"title":"EventHandle"}],"comments":"Packs all the type information we need to call `on`/`once`/`prependListener`/`prependOnceListener`\nwith the correct callback function type.\n\n**Naming convention**: \nIf the name of an event is `foo`, \nthe corresponding PureScript `EventHandle` value should be called `fooH`.\nThe `H` suffix is what prevent name conflicts in two situations:\n1. similarly-named methods (e.g. the `\"close\"` event and the `close` method)\n2. PureScript keywords (e.g. the `\"data\"` event)\n\nIf an event, `foo`, can have two different kinds of callbacks, (e.g. See `Node.Stream`'s `data` event),\none of two things should happen:\n1. a suffix should follow the `H` to distinguish between the two (e.g. `dataHString`/`dataHBuffer`)\n2. a prime character (i.e. `'`) should follow the `H` to distinguish between the two (e.g. `dataH`/`dataH'`)\n","info":{"dataDeclType":"data","declType":"data","roles":["Representational","Representational","Representational"],"typeArguments":[["emitterType",null],["pureScriptCallback",null],["javaScriptCallback",null]]},"kind":null,"sourceSpan":{"end":[171,64],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[170,1]},"title":"EventHandle"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Node","EventEmitter"],"EventHandle"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","EventEmitter"],"EventEmitter"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","Symbol"],"JsSymbol"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect","Uncurried"],"EffectFn1"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","EventEmitter"],"SymbolOrStr"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[175,110],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[175,1]},"title":"newListenerH"},{"children":[],"comments":null,"info":{"declType":"value","type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Node","EventEmitter"],"EventHandle"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","EventEmitter"],"EventEmitter"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","Symbol"],"JsSymbol"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect","Uncurried"],"EffectFn1"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Node","EventEmitter"],"SymbolOrStr"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}},"kind":null,"sourceSpan":{"end":[179,113],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[179,1]},"title":"removeListenerH"},{"children":[],"comments":"Adds the listener to the **end** of the `listeners` array.\nReturns a callback that will remove the listener from the event emitter's `listeners` array.\nIf the listener removal callback isn't needed, use `on_`.\n\nIntended usage:\n```\nremoveLoggerCallback <- eventEmitter # on errorHandle \\error -> do\n  log $ \"Got error: \" <> Exception.message error\n  log $ \"This listener will now be removed.\"\n-- sometime later...\nremoveLoggerCallback\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"emitter","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"psCb","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"jsCb","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Node","EventEmitter"],"EventHandle"],"tag":"TypeConstructor"},{"annotation":[],"contents":"emitter","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"psCb","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"jsCb","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"psCb","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"emitter","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[200,26],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[195,1]},"title":"on"},{"children":[],"comments":"Adds the callback to the **end** of the `listeners` array and provides no way to remove the listener in the future.\nIf you need a callback to remove the listener in the future, use `on`.\nIntended usage:\n```\neventEmitter # on_ errorHandle  \\error -> do\n  log $ \"Got error: \" <> Exception.message error\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"emitter","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"psCb","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"jsCb","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Node","EventEmitter"],"EventHandle"],"tag":"TypeConstructor"},{"annotation":[],"contents":"emitter","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"psCb","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"jsCb","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"psCb","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"emitter","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[216,17],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[211,1]},"title":"on_"},{"children":[],"comments":"Adds the listener to the **end** of the `listeners` array. The listener will be removed after it is invoked once.\nReturns a callback that will remove the listener from the event emitter's listeners array.\nIf the listener removal callback isn't needed, use `once_`.\n\nIntended usage:\n```\nremoveLoggerCallback <- eventEmitter # once errorHandle \\error -> do\n  log $ \"Got error: \" <> Exception.message error\n  log $ \"This listener will now be removed.\"\n-- sometime later...\nremoveLoggerCallback\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"emitter","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"psCb","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"jsCb","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Node","EventEmitter"],"EventHandle"],"tag":"TypeConstructor"},{"annotation":[],"contents":"emitter","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"psCb","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"jsCb","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"psCb","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"emitter","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[237,26],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[232,1]},"title":"once"},{"children":[],"comments":"Adds the listener to the **end** of the `listeners` array. The listener will be removed after it is invoked once.\nReturns a callback that will remove the listener from the event emitter's listeners array.\nIf you need a callback to remove the listener in the future, use `once`.\n\nIntended usage:\n```\neventEmitter # once_ errorHandle \\error -> do\n  log $ \"Got error: \" <> Exception.message error\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"emitter","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"psCb","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"jsCb","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Node","EventEmitter"],"EventHandle"],"tag":"TypeConstructor"},{"annotation":[],"contents":"emitter","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"psCb","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"jsCb","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"psCb","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"emitter","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[255,17],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[250,1]},"title":"once_"},{"children":[],"comments":"Adds the listener to the **start** of the `listeners` array.\nReturns a callback that will remove the listener from the event emitter's listeners array.\nIf the listener removal callback isn't needed, use `prependListener_`.\n\nIntended usage:\n```\nremoveLoggerCallback <- eventEmitter # prependListener errorHandle \\error -> do\n  log $ \"Got error: \" <> Exception.message error\n  log $ \"This listener will now be removed.\"\n-- sometime later...\nremoveLoggerCallback\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"emitter","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"psCb","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"jsCb","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Node","EventEmitter"],"EventHandle"],"tag":"TypeConstructor"},{"annotation":[],"contents":"emitter","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"psCb","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"jsCb","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"psCb","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"emitter","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[276,26],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[271,1]},"title":"prependListener"},{"children":[],"comments":"Adds the listener to the **start** of the `listeners` array.\nReturns a callback that will remove the listener from the event emitter's listeners array.\nIf the listener removal callback isn't needed, use `prependListener`.\n\nIntended usage:\n```\neventEmitter # prependListener_ errorHandle \\error -> do\n  log $ \"Got error: \" <> Exception.message error\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"emitter","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"psCb","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"jsCb","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Node","EventEmitter"],"EventHandle"],"tag":"TypeConstructor"},{"annotation":[],"contents":"emitter","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"psCb","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"jsCb","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"psCb","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"emitter","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[294,17],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[289,1]},"title":"prependListener_"},{"children":[],"comments":"Adds the listener to the **start** of the `listeners` array. The listener will be removed after it is invoked once.\nReturns a callback that will remove the listener from the event emitter's listeners array.\nIf the listener removal callback isn't needed, use `prependOnceListener_`.\n\nIntended usage:\n```\nremoveLoggerCallback <- eventEmitter # prependOnceListener errorHandle \\error -> do\n  log $ \"Got error: \" <> Exception.message error\n  log $ \"This listener will now be removed.\"\n-- sometime later...\nremoveLoggerCallback\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"emitter","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"psCb","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"jsCb","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Node","EventEmitter"],"EventHandle"],"tag":"TypeConstructor"},{"annotation":[],"contents":"emitter","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"psCb","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"jsCb","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"psCb","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"emitter","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[315,26],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[310,1]},"title":"prependOnceListener"},{"children":[],"comments":"Adds the listener to the **start** of the `listeners` array. The listener will be removed after it is invoked once.\nReturns a callback that will remove the listener from the event emitter's listeners array.\nIf you need a callback to remove the listener in the future, use `prependOnceListener`.\n\nIntended usage:\n```\neventEmitter # prependOnceListener_ errorHandle \\error -> do\n  log $ \"Got error: \" <> Exception.message error\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":{"identifier":"emitter","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"psCb","kind":null,"skolem":null,"type":{"annotation":[],"contents":{"identifier":"jsCb","kind":null,"skolem":null,"type":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Node","EventEmitter"],"EventHandle"],"tag":"TypeConstructor"},{"annotation":[],"contents":"emitter","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"psCb","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"jsCb","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"psCb","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"emitter","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Effect"],"Effect"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"},"visibility":"TypeVarInvisible"},"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[333,17],"name":".spago/p/node-event-emitter-3.0.0/src/Node/EventEmitter.purs","start":[328,1]},"title":"prependOnceListener_"}],"name":"Node.EventEmitter","reExports":[]}